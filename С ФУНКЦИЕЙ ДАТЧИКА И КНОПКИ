#include <WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <HTTPClient.h>
#include <WiFiClientSecure.h>
#include <vector>

// Wi-Fi настройки
const char* ssid = "TP-Link_515A";
const char* password = "21857638";

// URL для таблиц
const char* sensorGoogleScriptURL = "https://script.google.com/macros/s/AKfycbxYNWKSfoAO6UJBgZEUSu1r-lvbFvAjqBrHRWuqCsut0Tn0czw8FfQNdsXMpWbq5vo1/exec";
const char* buttonGoogleScriptURL = "https://script.google.com/macros/s/AKfycbwoQFseC5w0iiQ-XC6Afaq7DNAAOeLxQbgVdwJ_trLedQVGsK21RNMqTBIGaezW5GDX/exec";

// Настройки для кнопки
const int buttonPin = 16; // GPIO16
const char* buttonColumn = "BB"; // Колонка для записи данных кнопки

// Настройки для датчика
const int sensorPin = 4;       // GPIO4
const int ledRedPin = 5;       // GPIO5
const int ledGreenPin = 17;    // GPIO17
const char* sensorSheetName = "PS15"; // Лист для записи данных датчика

// Переменные для кнопки
bool buttonState = HIGH;
bool lastButtonState = HIGH;
unsigned long lastDebounceTimeButton = 0;
const unsigned long debounceDelayButton = 50;

// Переменные для датчика
bool sensorState = HIGH;
bool sensorPrevState = HIGH;
unsigned long lastDebounceTimeSensor = 0;
const unsigned long debounceDelaySensor = 50;
unsigned long lastSendTime = 0;
const unsigned long sendDelay = 3000;

// Буфер для хранения данных
struct Data {
  String url;
};
std::vector<Data> dataBuffer;

// Настройка времени
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 3600 * 3); // Часовой пояс GMT+3 (Мск)

// Функции
String getMonthYearSheetName();
int getCurrentDay();
void sendButtonData();
void sendSensorData(int sensorValue, int memoryStatus);
String getWiFiStatus();
void sendBufferedData();
void blinkGreen();

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  Serial.print("Connecting to ");
  Serial.println(ssid);

  pinMode(buttonPin, INPUT_PULLUP);  // Кнопка с подтягивающим резистором
  pinMode(sensorPin, INPUT);         // Датчик как входной
  pinMode(ledRedPin, OUTPUT);
  pinMode(ledGreenPin, OUTPUT);

  digitalWrite(ledRedPin, LOW);
  digitalWrite(ledGreenPin, LOW);

  // Подключение к Wi-Fi
  while (WiFi.status() != WL_CONNECTED) {
    digitalWrite(ledRedPin, HIGH);
    delay(250);  // В два раза быстрее (250 мс вместо 500 мс)
    digitalWrite(ledRedPin, LOW);
    delay(250);
    Serial.print(".");
  }

  digitalWrite(ledRedPin, LOW);
  digitalWrite(ledGreenPin, HIGH);  // Зелёный светодиод при подключении к Wi-Fi
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  // Инициализация NTP
  timeClient.begin();
}

void loop() {
  timeClient.update(); // Обновляем время

  // Проверка и отправка данных из буфера
  sendBufferedData();

  // === ОБРАБОТКА КНОПКИ ===
  int buttonReading = digitalRead(buttonPin);
  if (buttonReading != lastButtonState) {
    lastDebounceTimeButton = millis();
  }

  if ((millis() - lastDebounceTimeButton > debounceDelayButton) && (buttonReading != buttonState)) {
    buttonState = buttonReading;

    if (buttonState == LOW) {  // Если кнопка нажата
      Serial.println("Button pressed!");
      blinkGreen(); // Мигнуть зелёным светодиодом
      sendButtonData();
    }
  }
  lastButtonState = buttonReading;

  // === ОБРАБОТКА ДАТЧИКА ===
  int sensorReading = digitalRead(sensorPin);
  if (sensorReading != sensorPrevState) {
    lastDebounceTimeSensor = millis();
    sensorPrevState = sensorReading;
  }

  if ((millis() - lastDebounceTimeSensor > debounceDelaySensor) && (sensorReading != sensorState)) {
    sensorState = sensorReading;

    if (sensorState == LOW && (millis() - lastSendTime > sendDelay)) {
      Serial.println("Sensor triggered");
      lastSendTime = millis();
      blinkGreen(); // Мигнуть зелёным светодиодом
      sendSensorData(1, 0);  // Отправка данных
    }
  }

  // === ПРОВЕРКА СОСТОЯНИЯ WI-FI ===
  if (WiFi.status() != WL_CONNECTED) {
    digitalWrite(ledGreenPin, LOW);
    digitalWrite(ledRedPin, HIGH);
    delay(250);  // В два раза быстрее (250 мс вместо 500 мс)
    digitalWrite(ledRedPin, LOW);
    delay(250);
    Serial.println("WiFi disconnected!");
  } else {
    digitalWrite(ledRedPin, LOW);
    digitalWrite(ledGreenPin, HIGH);
  }
}

// === ФУНКЦИИ КНОПКИ ===
void sendButtonData() {
  WiFiClientSecure client;
  client.setInsecure();
  HTTPClient http;

  String sheetName = getMonthYearSheetName();
  int currentDay = getCurrentDay();
  int row = currentDay + 3;

  String url = String(buttonGoogleScriptURL) + "?column=" + buttonColumn + "&row=" + row + "&sheet=" + sheetName;
  Serial.print("Requesting URL: ");
  Serial.println(url);

  if (WiFi.status() == WL_CONNECTED) {
    http.begin(client, url);
    int httpCode = http.GET();

    if (httpCode > 0) {
      Serial.printf("HTTP Code: %d\n", httpCode);
    } else {
      Serial.printf("Error on HTTP request: %s\n", http.errorToString(httpCode).c_str());
      dataBuffer.push_back({url});
    }
    http.end();
  } else {
    dataBuffer.push_back({url});
    Serial.println("WiFi not connected. Data saved to buffer.");
  }
}

// === ФУНКЦИИ ДАТЧИКА ===
void sendSensorData(int sensorValue, int memoryStatus) {
  WiFiClientSecure client;
  client.setInsecure();
  HTTPClient http;

  String wifiStatus = getWiFiStatus();
  String url = String(sensorGoogleScriptURL) + "?button=" + String(sensorValue) +
               "&memory=" + String(memoryStatus) + "&wifiStatus=" + wifiStatus +
               "&sheet=" + sensorSheetName;

  Serial.print("Requesting URL: ");
  Serial.println(url);

  if (WiFi.status() == WL_CONNECTED) {
    http.begin(client, url);
    int httpCode = http.GET();

    if (httpCode > 0) {
      Serial.printf("HTTP Code: %d\n", httpCode);
    } else {
      Serial.printf("Error on HTTP request: %s\n", http.errorToString(httpCode).c_str());
      dataBuffer.push_back({url});
    }
    http.end();
  } else {
    dataBuffer.push_back({url});
    Serial.println("WiFi not connected. Data saved to buffer.");
  }
}

// === ОТПРАВКА ДАННЫХ ИЗ БУФЕРА ===
void sendBufferedData() {
  if (WiFi.status() == WL_CONNECTED && !dataBuffer.empty()) {
    WiFiClientSecure client;
    client.setInsecure();
    HTTPClient http;

    for (size_t i = 0; i < dataBuffer.size(); i++) {
      Serial.print("Resending data: ");
      Serial.println(dataBuffer[i].url);

      http.begin(client, dataBuffer[i].url);
      int httpCode = http.GET();

      if (httpCode > 0) {
        Serial.printf("HTTP Code: %d\n", httpCode);
        dataBuffer.erase(dataBuffer.begin() + i); // Удаляем отправленные данные
        i--;
      } else {
        Serial.printf("Error on HTTP request: %s\n", http.errorToString(httpCode).c_str());
        break; // Останавливаем попытки на ошибке
      }
      http.end();
    }
  }
}

// === ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ===
String getMonthYearSheetName() {
  time_t rawTime = timeClient.getEpochTime();
  struct tm* timeInfo = localtime(&rawTime);
  int currentMonth = timeInfo->tm_mon + 1;
  int currentYear = timeInfo->tm_year + 1900;
  return String(currentMonth) + "." + String(currentYear % 100);
}

int getCurrentDay() {
  time_t rawTime = timeClient.getEpochTime();
  struct tm* timeInfo = localtime(&rawTime);
  return timeInfo->tm_mday;
}

String getWiFiStatus() {
  int rssi = WiFi.RSSI();
  if (WiFi.status() != WL_CONNECTED) {
    return "6";
  } else if (rssi >= -50) {
    return "1";
  } else if (rssi >= -60) {
    return "2";
  } else if (rssi >= -70) {
    return "3";
  } else if (rssi >= -80) {
    return "4";
  } else {
    return "5";
  }
}

void blinkGreen() {
  digitalWrite(ledGreenPin, LOW);
  delay(100);
  digitalWrite(ledGreenPin, HIGH);
}
